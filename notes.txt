#################################
#################################
########### July 12 2020 ########
#################################

        Project Structure

Flask_template_site/

# 1 -----------------------------
COMMAND to launch the site:
    $ flask run
COMMAND to stop the site:
    $ ctrl+c
test deployment url:
    http://localhost:5000/

# 2 -----------------------------
environmental variables are set using this format:
'export FLASK_APP=template_site.py', where export would be
'set' on a windows machine. Stored in .flaskenv file to save between
terminal sessions.
--Dependant on the python-dotenv package

# 3 -----------------------------
Making the database (using flask-SQLalchemy):
"Flask-SQLAlchemy uses a "snake case" naming convention
for database tables by default."
    -only do this when making the database 1st time:
    $ flask db init

    -when a new table or other change is made to the db:
    $ flask db migrate -m "my message about the change"

    -when those changes are ready to be added:
    $ flask db upgrade

    -if a mistake is commited to the db:
    $ flask db downgrade

# 4 -----------------------------
Using the Database from python terminal/.py
    >>> from app import db
    >>> from app.models import User, GenericProjectTable

    # adding new entries to a table
    >>> newuser = User(username='johndoe', email='john@doe.doe')
    >>> db.session.add(newuser)
    >>> db.session.commit()

    # query a given table
    >>> users = User.query.all()
    >>> users
    [<User john>] # a list of all the users, can be iterated through

    # query via id
    >>> User.query.get(1)
    <User john>
# 5 -----------------------------
PICKLE OBJECT in SQLalchemy
~is a serialized python object, like json, only binary instead of
a human readable string. I will make a pickle<->json converter so that
json objects can be stored in the database as pickles.

        -maybe not, seems unideal due to pickle objects not always
        being a 1:1 with json encoding..

# 6 -----------------------------
    Setting up flask_uploads.py
    In venv/lib/python3.8/site-packages/flask_uploads.py
    Change
        from werkzeug import secure_filename,FileStorage
    to
        from werkzeug.utils import secure_filename
        from werkzeug.datastructures import  FileStorage

# 7 -----------------------------
    THREADING FUNCTIONS
        -useful to make one function wait for another, or to have
        functions run asynchronously, so no waiting is nescesary

            t = Thread(target=datafiles.save, args=filedata)
            t.start()
            while t.is_alive():
                pass

            move_upload(current_user.username, filedata.filename, False)
# 8 -----------------------------
    Email server configuration for a gmail account:
        $ export MAIL_SERVER=smtp.googlemail.com
        $ export MAIL_PORT=587
        $ export MAIL_USE_TLS=1
        $ export MAIL_USERNAME=<your-gmail-username>
        $ export MAIL_PASSWORD=<your-gmail-password>
    Then you need to allow 'less secure' apps on the google account:
        https://support.google.com/accounts/answer/6010255?hl=en

    ADMINS = ['your-email@example.com']

        if the email server is not set in the environment, then the emailing of errors needs to be disabled

    to use the SMTP 'fake' email server for debugging, just run this in another terminal:
        $ python -m smtpd -n -c DebuggingServer localhost:8025
# restless api ------------------
    AUTHENTICATING API USERS:

    https://github.com/jfinkels/flask-restless/blob/master/examples/server_configurations/authentication/__main__.py
# infinity -1 -------------------
Production server
    1)ssh into the machine
    2)remove root user login, and set up pub/priv keys for passwordless entry
    3)setup ufw for ports 20,21,80,443, and --force enable
    4)update and upgrade
    5)install python3 python3-venv python3-dev
    6)install mysql-server postfix nginx git
# infinity ----------------------
References:
    1)  https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
    2)  https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/#querying-records
    3)  https://gist.github.com/davfre/8313299
    4)  https://towardsdatascience.com/how-to-create-a-plotly-visualization-and-embed-it-on-websites-517c1a78568b
    5)  https://plotly.com/python-api-reference/generated/plotly.io.html
    6)      a) SAVING PLOTLY PLOTS TO HTML IN R: https://plotly-r.com/saving.html
            b) TO EMBED THAT INTO ANOTHER DOC: https://www.w3schools.com/tags/tag_iframe.asp#:~:text=The%20tag%20specifies%20an,within%20the%20current%20HTML%20document.&text=This%20is%20used%20by%20screen,of%20the%20is.